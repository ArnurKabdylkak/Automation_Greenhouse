
autogreenhouse.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000652  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000c2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  00800100  00800100  00000652  2**0
                  ALLOC
  3 .comment      0000002f  00000000  00000000  00000652  2**0
                  CONTENTS, READONLY
  4 .stack.descriptors.hdr 0000002a  00000000  00000000  00000681  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  000006ab  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001482  00000000  00000000  00000733  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007e0  00000000  00000000  00001bb5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006e2  00000000  00000000  00002395  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000015c  00000000  00000000  00002a78  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000022e  00000000  00000000  00002bd4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000822  00000000  00000000  00002e02  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  00003624  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .text         00000004  000005b0  000005b0  00000644  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000369c  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .text.init    00000012  0000059e  0000059e  00000632  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.sendCommand 00000032  0000048c  0000048c  00000520  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.initLCD 0000005c  00000430  00000430  000004c4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.sendData 00000032  000004be  000004be  00000552  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .progmemx.data 0000001e  000000c2  000000c2  00000156  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 20 .text.sendTemperatureWord 0000005e  00000316  00000316  000003aa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.sendHumidityWord 0000005e  00000374  00000374  00000408  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.sendSoilWord 0000005e  000003d2  000003d2  00000466  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.convertData 000000e4  000000e0  000000e0  00000174  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.readADC 0000002a  000004f0  000004f0  00000584  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text.readSoilMoisture 0000001c  00000538  00000538  000005cc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .text.hexToAscii 0000001a  00000554  00000554  000005e8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .text.writeDHTData 00000076  0000023c  0000023c  000002d0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .text.writeSoilMoisture 00000064  000002b2  000002b2  00000346  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .text.main    00000078  000001c4  000001c4  00000258  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .bss.displayToggle 00000001  00800105  00800105  00000652  2**0
                  ALLOC
 31 .text.libgcc.mul 0000001e  0000051a  0000051a  000005ae  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 32 .text.libgcc  0000001a  0000056e  0000056e  00000602  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 33 .text.__dummy_fini 00000002  000005b8  000005b8  0000064c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 34 .text.__dummy_funcs_on_exit 00000002  000005ba  000005ba  0000064e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 35 .text.__dummy_simulator_exit 00000002  000005bc  000005bc  00000650  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 36 .text.exit    00000016  00000588  00000588  0000061c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 37 .text._Exit   00000004  000005b4  000005b4  00000648  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 37 00 	jmp	0x6e	; 0x6e <__ctors_end>
   4:	0c 94 d8 02 	jmp	0x5b0	; 0x5b0 <__bad_interrupt>
   8:	0c 94 d8 02 	jmp	0x5b0	; 0x5b0 <__bad_interrupt>
   c:	0c 94 d8 02 	jmp	0x5b0	; 0x5b0 <__bad_interrupt>
  10:	0c 94 d8 02 	jmp	0x5b0	; 0x5b0 <__bad_interrupt>
  14:	0c 94 d8 02 	jmp	0x5b0	; 0x5b0 <__bad_interrupt>
  18:	0c 94 d8 02 	jmp	0x5b0	; 0x5b0 <__bad_interrupt>
  1c:	0c 94 d8 02 	jmp	0x5b0	; 0x5b0 <__bad_interrupt>
  20:	0c 94 d8 02 	jmp	0x5b0	; 0x5b0 <__bad_interrupt>
  24:	0c 94 d8 02 	jmp	0x5b0	; 0x5b0 <__bad_interrupt>
  28:	0c 94 d8 02 	jmp	0x5b0	; 0x5b0 <__bad_interrupt>
  2c:	0c 94 d8 02 	jmp	0x5b0	; 0x5b0 <__bad_interrupt>
  30:	0c 94 d8 02 	jmp	0x5b0	; 0x5b0 <__bad_interrupt>
  34:	0c 94 d8 02 	jmp	0x5b0	; 0x5b0 <__bad_interrupt>
  38:	0c 94 d8 02 	jmp	0x5b0	; 0x5b0 <__bad_interrupt>
  3c:	0c 94 d8 02 	jmp	0x5b0	; 0x5b0 <__bad_interrupt>
  40:	0c 94 d8 02 	jmp	0x5b0	; 0x5b0 <__bad_interrupt>
  44:	0c 94 d8 02 	jmp	0x5b0	; 0x5b0 <__bad_interrupt>
  48:	0c 94 d8 02 	jmp	0x5b0	; 0x5b0 <__bad_interrupt>
  4c:	0c 94 d8 02 	jmp	0x5b0	; 0x5b0 <__bad_interrupt>
  50:	0c 94 d8 02 	jmp	0x5b0	; 0x5b0 <__bad_interrupt>
  54:	0c 94 d8 02 	jmp	0x5b0	; 0x5b0 <__bad_interrupt>
  58:	0c 94 d8 02 	jmp	0x5b0	; 0x5b0 <__bad_interrupt>
  5c:	0c 94 d8 02 	jmp	0x5b0	; 0x5b0 <__bad_interrupt>
  60:	0c 94 d8 02 	jmp	0x5b0	; 0x5b0 <__bad_interrupt>
  64:	0c 94 d8 02 	jmp	0x5b0	; 0x5b0 <__bad_interrupt>

00000068 <.dinit>:
  68:	01 00       	.word	0x0001	; ????
  6a:	01 06       	cpc	r0, r17
  6c:	80 00       	.word	0x0080	; ????

0000006e <__ctors_end>:
  6e:	11 24       	eor	r1, r1
  70:	1f be       	out	0x3f, r1	; 63
  72:	cf ef       	ldi	r28, 0xFF	; 255
  74:	d8 e0       	ldi	r29, 0x08	; 8
  76:	de bf       	out	0x3e, r29	; 62
  78:	cd bf       	out	0x3d, r28	; 61

0000007a <__do_copy_data>:
  7a:	e8 e6       	ldi	r30, 0x68	; 104
  7c:	f0 e0       	ldi	r31, 0x00	; 0
  7e:	40 e0       	ldi	r20, 0x00	; 0
  80:	17 c0       	rjmp	.+46     	; 0xb0 <__do_clear_bss+0x8>
  82:	b5 91       	lpm	r27, Z+
  84:	a5 91       	lpm	r26, Z+
  86:	35 91       	lpm	r19, Z+
  88:	25 91       	lpm	r18, Z+
  8a:	05 91       	lpm	r16, Z+
  8c:	07 fd       	sbrc	r16, 7
  8e:	0c c0       	rjmp	.+24     	; 0xa8 <__do_clear_bss>
  90:	95 91       	lpm	r25, Z+
  92:	85 91       	lpm	r24, Z+
  94:	ef 01       	movw	r28, r30
  96:	f9 2f       	mov	r31, r25
  98:	e8 2f       	mov	r30, r24
  9a:	05 90       	lpm	r0, Z+
  9c:	0d 92       	st	X+, r0
  9e:	a2 17       	cp	r26, r18
  a0:	b3 07       	cpc	r27, r19
  a2:	d9 f7       	brne	.-10     	; 0x9a <__do_copy_data+0x20>
  a4:	fe 01       	movw	r30, r28
  a6:	04 c0       	rjmp	.+8      	; 0xb0 <__do_clear_bss+0x8>

000000a8 <__do_clear_bss>:
  a8:	1d 92       	st	X+, r1
  aa:	a2 17       	cp	r26, r18
  ac:	b3 07       	cpc	r27, r19
  ae:	e1 f7       	brne	.-8      	; 0xa8 <__do_clear_bss>
  b0:	ed 36       	cpi	r30, 0x6D	; 109
  b2:	f4 07       	cpc	r31, r20
  b4:	31 f7       	brne	.-52     	; 0x82 <__do_copy_data+0x8>
  b6:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <main>
  ba:	0c 94 c4 02 	jmp	0x588	; 0x588 <exit>

000000be <_exit>:
  be:	f8 94       	cli

000000c0 <__stop_program>:
  c0:	ff cf       	rjmp	.-2      	; 0xc0 <__stop_program>

Disassembly of section .text:

000005b0 <__bad_interrupt>:
 5b0:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.init:

0000059e <init>:
		_delay_ms(3000);  // 3-second delay between displays
	}
}

void init(void) {
	DDRD = 0xFF;    // PORTD as output for LCD data (8-bit)
 59e:	8f ef       	ldi	r24, 0xFF	; 255
 5a0:	8a b9       	out	0x0a, r24	; 10
	DDRB &= ~(1 << 0);  // PB0 as input (not used for LCD/DHT in this config)
 5a2:	84 b1       	in	r24, 0x04	; 4
 5a4:	8e 7f       	andi	r24, 0xFE	; 254
 5a6:	84 b9       	out	0x04, r24	; 4
	DDRC |= (1 << 0) | (1 << 1) | (1 << 2);  // PC0 (EN), PC1 (RS), PC2 (DHT) as outputs
 5a8:	87 b1       	in	r24, 0x07	; 7
 5aa:	87 60       	ori	r24, 0x07	; 7
 5ac:	87 b9       	out	0x07, r24	; 7
 5ae:	08 95       	ret

Disassembly of section .text.sendCommand:

0000048c <sendCommand>:
	sendCommand(0x01);      // Clear display
	_delay_ms(2);           // Delay after clear (>1.52ms)
}

void sendCommand(uint8_t cmd) {
	LCD_PORT = cmd;
 48c:	8b b9       	out	0x0b, r24	; 11
	PORTC &= ~(1 << LCD_RS);  // RS = 0 (command mode)
 48e:	88 b1       	in	r24, 0x08	; 8
 490:	8d 7f       	andi	r24, 0xFD	; 253
 492:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 494:	85 e0       	ldi	r24, 0x05	; 5
 496:	8a 95       	dec	r24
 498:	f1 f7       	brne	.-4      	; 0x496 <sendCommand+0xa>
 49a:	00 00       	nop
	_delay_us(1);
	PORTC |= (1 << LCD_EN);   // EN = 1
 49c:	88 b1       	in	r24, 0x08	; 8
 49e:	81 60       	ori	r24, 0x01	; 1
 4a0:	88 b9       	out	0x08, r24	; 8
 4a2:	95 e0       	ldi	r25, 0x05	; 5
 4a4:	9a 95       	dec	r25
 4a6:	f1 f7       	brne	.-4      	; 0x4a4 <sendCommand+0x18>
 4a8:	00 00       	nop
	_delay_us(1);
	PORTC &= ~(1 << LCD_EN);  // EN = 0
 4aa:	88 b1       	in	r24, 0x08	; 8
 4ac:	8e 7f       	andi	r24, 0xFE	; 254
 4ae:	88 b9       	out	0x08, r24	; 8
 4b0:	8f e8       	ldi	r24, 0x8F	; 143
 4b2:	91 e0       	ldi	r25, 0x01	; 1
 4b4:	01 97       	sbiw	r24, 0x01	; 1
 4b6:	f1 f7       	brne	.-4      	; 0x4b4 <sendCommand+0x28>
 4b8:	00 c0       	rjmp	.+0      	; 0x4ba <sendCommand+0x2e>
 4ba:	00 00       	nop
 4bc:	08 95       	ret

Disassembly of section .text.initLCD:

00000430 <initLCD>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 430:	2f ef       	ldi	r18, 0xFF	; 255
 432:	80 e7       	ldi	r24, 0x70	; 112
 434:	92 e0       	ldi	r25, 0x02	; 2
 436:	21 50       	subi	r18, 0x01	; 1
 438:	80 40       	sbci	r24, 0x00	; 0
 43a:	90 40       	sbci	r25, 0x00	; 0
 43c:	e1 f7       	brne	.-8      	; 0x436 <initLCD+0x6>
 43e:	00 c0       	rjmp	.+0      	; 0x440 <initLCD+0x10>
 440:	00 00       	nop
	// ADC is input by default, no need to set DDR for PC3 (A3)
}

void initLCD(void) {
	_delay_ms(50);          // Delay after power-on (>40ms)
	sendCommand(0x38);      // 8-bit, 2 lines
 442:	88 e3       	ldi	r24, 0x38	; 56
 444:	0e 94 46 02 	call	0x48c	; 0x48c <sendCommand>
 448:	8f e1       	ldi	r24, 0x1F	; 31
 44a:	9e e4       	ldi	r25, 0x4E	; 78
 44c:	01 97       	sbiw	r24, 0x01	; 1
 44e:	f1 f7       	brne	.-4      	; 0x44c <initLCD+0x1c>
 450:	00 c0       	rjmp	.+0      	; 0x452 <initLCD+0x22>
 452:	00 00       	nop
	_delay_ms(5);           // Delay >4.1ms
	sendCommand(0x38);      // Repeat command
 454:	88 e3       	ldi	r24, 0x38	; 56
 456:	0e 94 46 02 	call	0x48c	; 0x48c <sendCommand>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 45a:	87 e5       	ldi	r24, 0x57	; 87
 45c:	92 e0       	ldi	r25, 0x02	; 2
 45e:	01 97       	sbiw	r24, 0x01	; 1
 460:	f1 f7       	brne	.-4      	; 0x45e <initLCD+0x2e>
 462:	00 c0       	rjmp	.+0      	; 0x464 <initLCD+0x34>
 464:	00 00       	nop
	_delay_us(150);         // Delay >100us
	sendCommand(0x38);      // Repeat for reliability
 466:	88 e3       	ldi	r24, 0x38	; 56
 468:	0e 94 46 02 	call	0x48c	; 0x48c <sendCommand>
	sendCommand(0x0C);      // Display on, cursor off, blink off (or 0x0F for cursor)
 46c:	8c e0       	ldi	r24, 0x0C	; 12
 46e:	0e 94 46 02 	call	0x48c	; 0x48c <sendCommand>
	sendCommand(0x06);      // Entry mode: increment, no shift
 472:	86 e0       	ldi	r24, 0x06	; 6
 474:	0e 94 46 02 	call	0x48c	; 0x48c <sendCommand>
	sendCommand(0x01);      // Clear display
 478:	81 e0       	ldi	r24, 0x01	; 1
 47a:	0e 94 46 02 	call	0x48c	; 0x48c <sendCommand>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 47e:	8f e3       	ldi	r24, 0x3F	; 63
 480:	9f e1       	ldi	r25, 0x1F	; 31
 482:	01 97       	sbiw	r24, 0x01	; 1
 484:	f1 f7       	brne	.-4      	; 0x482 <initLCD+0x52>
 486:	00 c0       	rjmp	.+0      	; 0x488 <initLCD+0x58>
 488:	00 00       	nop
 48a:	08 95       	ret

Disassembly of section .text.sendData:

000004be <sendData>:
	PORTC &= ~(1 << LCD_EN);  // EN = 0
	_delay_us(100);
}

void sendData(uint8_t data) {
	LCD_PORT = data;
 4be:	8b b9       	out	0x0b, r24	; 11
	PORTC |= (1 << LCD_RS);   // RS = 1 (data mode)
 4c0:	88 b1       	in	r24, 0x08	; 8
 4c2:	82 60       	ori	r24, 0x02	; 2
 4c4:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4c6:	85 e0       	ldi	r24, 0x05	; 5
 4c8:	8a 95       	dec	r24
 4ca:	f1 f7       	brne	.-4      	; 0x4c8 <sendData+0xa>
 4cc:	00 00       	nop
	_delay_us(1);
	PORTC |= (1 << LCD_EN);   // EN = 1
 4ce:	88 b1       	in	r24, 0x08	; 8
 4d0:	81 60       	ori	r24, 0x01	; 1
 4d2:	88 b9       	out	0x08, r24	; 8
 4d4:	95 e0       	ldi	r25, 0x05	; 5
 4d6:	9a 95       	dec	r25
 4d8:	f1 f7       	brne	.-4      	; 0x4d6 <sendData+0x18>
 4da:	00 00       	nop
	_delay_us(1);
	PORTC &= ~(1 << LCD_EN);  // EN = 0
 4dc:	88 b1       	in	r24, 0x08	; 8
 4de:	8e 7f       	andi	r24, 0xFE	; 254
 4e0:	88 b9       	out	0x08, r24	; 8
 4e2:	8f e8       	ldi	r24, 0x8F	; 143
 4e4:	91 e0       	ldi	r25, 0x01	; 1
 4e6:	01 97       	sbiw	r24, 0x01	; 1
 4e8:	f1 f7       	brne	.-4      	; 0x4e6 <sendData+0x28>
 4ea:	00 c0       	rjmp	.+0      	; 0x4ec <sendData+0x2e>
 4ec:	00 00       	nop
 4ee:	08 95       	ret

Disassembly of section .text.sendTemperatureWord:

00000316 <sendTemperatureWord>:
	_delay_us(100);
}

void sendTemperatureWord(void) {
 316:	1f 93       	push	r17
 318:	cf 93       	push	r28
 31a:	df 93       	push	r29
 31c:	cd b7       	in	r28, 0x3d	; 61
 31e:	de b7       	in	r29, 0x3e	; 62
 320:	2a 97       	sbiw	r28, 0x0a	; 10
 322:	0f b6       	in	r0, 0x3f	; 63
 324:	f8 94       	cli
 326:	de bf       	out	0x3e, r29	; 62
 328:	0f be       	out	0x3f, r0	; 63
 32a:	cd bf       	out	0x3d, r28	; 61
	const char tempWord[] = "Temp    :";
 32c:	22 ec       	ldi	r18, 0xC2	; 194
 32e:	30 e0       	ldi	r19, 0x00	; 0
 330:	40 e0       	ldi	r20, 0x00	; 0
 332:	8a e0       	ldi	r24, 0x0A	; 10
 334:	f9 01       	movw	r30, r18
 336:	de 01       	movw	r26, r28
 338:	11 96       	adiw	r26, 0x01	; 1
 33a:	74 2f       	mov	r23, r20
 33c:	0e 94 b7 02 	call	0x56e	; 0x56e <__movmemx_qi>
	for (uint8_t i = 0; tempWord[i] != ':'; i++) {
 340:	10 e0       	ldi	r17, 0x00	; 0
 342:	03 c0       	rjmp	.+6      	; 0x34a <sendTemperatureWord+0x34>
		sendData(tempWord[i]);
 344:	0e 94 5f 02 	call	0x4be	; 0x4be <sendData>
	_delay_us(100);
}

void sendTemperatureWord(void) {
	const char tempWord[] = "Temp    :";
	for (uint8_t i = 0; tempWord[i] != ':'; i++) {
 348:	1f 5f       	subi	r17, 0xFF	; 255
 34a:	e1 e0       	ldi	r30, 0x01	; 1
 34c:	f0 e0       	ldi	r31, 0x00	; 0
 34e:	ec 0f       	add	r30, r28
 350:	fd 1f       	adc	r31, r29
 352:	e1 0f       	add	r30, r17
 354:	f1 1d       	adc	r31, r1
 356:	80 81       	ld	r24, Z
 358:	8a 33       	cpi	r24, 0x3A	; 58
 35a:	a1 f7       	brne	.-24     	; 0x344 <sendTemperatureWord+0x2e>
		sendData(tempWord[i]);
	}
	sendData(':');
 35c:	0e 94 5f 02 	call	0x4be	; 0x4be <sendData>
}
 360:	2a 96       	adiw	r28, 0x0a	; 10
 362:	0f b6       	in	r0, 0x3f	; 63
 364:	f8 94       	cli
 366:	de bf       	out	0x3e, r29	; 62
 368:	0f be       	out	0x3f, r0	; 63
 36a:	cd bf       	out	0x3d, r28	; 61
 36c:	df 91       	pop	r29
 36e:	cf 91       	pop	r28
 370:	1f 91       	pop	r17
 372:	08 95       	ret

Disassembly of section .text.sendHumidityWord:

00000374 <sendHumidityWord>:

void sendHumidityWord(void) {
 374:	1f 93       	push	r17
 376:	cf 93       	push	r28
 378:	df 93       	push	r29
 37a:	cd b7       	in	r28, 0x3d	; 61
 37c:	de b7       	in	r29, 0x3e	; 62
 37e:	2a 97       	sbiw	r28, 0x0a	; 10
 380:	0f b6       	in	r0, 0x3f	; 63
 382:	f8 94       	cli
 384:	de bf       	out	0x3e, r29	; 62
 386:	0f be       	out	0x3f, r0	; 63
 388:	cd bf       	out	0x3d, r28	; 61
	const char humWord[] = "Hum     :";
 38a:	2c ec       	ldi	r18, 0xCC	; 204
 38c:	30 e0       	ldi	r19, 0x00	; 0
 38e:	40 e0       	ldi	r20, 0x00	; 0
 390:	8a e0       	ldi	r24, 0x0A	; 10
 392:	f9 01       	movw	r30, r18
 394:	de 01       	movw	r26, r28
 396:	11 96       	adiw	r26, 0x01	; 1
 398:	74 2f       	mov	r23, r20
 39a:	0e 94 b7 02 	call	0x56e	; 0x56e <__movmemx_qi>
	for (uint8_t i = 0; humWord[i] != ':'; i++) {
 39e:	10 e0       	ldi	r17, 0x00	; 0
 3a0:	03 c0       	rjmp	.+6      	; 0x3a8 <sendHumidityWord+0x34>
		sendData(humWord[i]);
 3a2:	0e 94 5f 02 	call	0x4be	; 0x4be <sendData>
	sendData(':');
}

void sendHumidityWord(void) {
	const char humWord[] = "Hum     :";
	for (uint8_t i = 0; humWord[i] != ':'; i++) {
 3a6:	1f 5f       	subi	r17, 0xFF	; 255
 3a8:	e1 e0       	ldi	r30, 0x01	; 1
 3aa:	f0 e0       	ldi	r31, 0x00	; 0
 3ac:	ec 0f       	add	r30, r28
 3ae:	fd 1f       	adc	r31, r29
 3b0:	e1 0f       	add	r30, r17
 3b2:	f1 1d       	adc	r31, r1
 3b4:	80 81       	ld	r24, Z
 3b6:	8a 33       	cpi	r24, 0x3A	; 58
 3b8:	a1 f7       	brne	.-24     	; 0x3a2 <sendHumidityWord+0x2e>
		sendData(humWord[i]);
	}
	sendData(':');
 3ba:	0e 94 5f 02 	call	0x4be	; 0x4be <sendData>
}
 3be:	2a 96       	adiw	r28, 0x0a	; 10
 3c0:	0f b6       	in	r0, 0x3f	; 63
 3c2:	f8 94       	cli
 3c4:	de bf       	out	0x3e, r29	; 62
 3c6:	0f be       	out	0x3f, r0	; 63
 3c8:	cd bf       	out	0x3d, r28	; 61
 3ca:	df 91       	pop	r29
 3cc:	cf 91       	pop	r28
 3ce:	1f 91       	pop	r17
 3d0:	08 95       	ret

Disassembly of section .text.sendSoilWord:

000003d2 <sendSoilWord>:

void sendSoilWord(void) {
 3d2:	1f 93       	push	r17
 3d4:	cf 93       	push	r28
 3d6:	df 93       	push	r29
 3d8:	cd b7       	in	r28, 0x3d	; 61
 3da:	de b7       	in	r29, 0x3e	; 62
 3dc:	2a 97       	sbiw	r28, 0x0a	; 10
 3de:	0f b6       	in	r0, 0x3f	; 63
 3e0:	f8 94       	cli
 3e2:	de bf       	out	0x3e, r29	; 62
 3e4:	0f be       	out	0x3f, r0	; 63
 3e6:	cd bf       	out	0x3d, r28	; 61
	const char soilWord[] = "Soil    :";
 3e8:	26 ed       	ldi	r18, 0xD6	; 214
 3ea:	30 e0       	ldi	r19, 0x00	; 0
 3ec:	40 e0       	ldi	r20, 0x00	; 0
 3ee:	8a e0       	ldi	r24, 0x0A	; 10
 3f0:	f9 01       	movw	r30, r18
 3f2:	de 01       	movw	r26, r28
 3f4:	11 96       	adiw	r26, 0x01	; 1
 3f6:	74 2f       	mov	r23, r20
 3f8:	0e 94 b7 02 	call	0x56e	; 0x56e <__movmemx_qi>
	for (uint8_t i = 0; soilWord[i] != ':'; i++) {
 3fc:	10 e0       	ldi	r17, 0x00	; 0
 3fe:	03 c0       	rjmp	.+6      	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
		sendData(soilWord[i]);
 400:	0e 94 5f 02 	call	0x4be	; 0x4be <sendData>
	sendData(':');
}

void sendSoilWord(void) {
	const char soilWord[] = "Soil    :";
	for (uint8_t i = 0; soilWord[i] != ':'; i++) {
 404:	1f 5f       	subi	r17, 0xFF	; 255
 406:	e1 e0       	ldi	r30, 0x01	; 1
 408:	f0 e0       	ldi	r31, 0x00	; 0
 40a:	ec 0f       	add	r30, r28
 40c:	fd 1f       	adc	r31, r29
 40e:	e1 0f       	add	r30, r17
 410:	f1 1d       	adc	r31, r1
 412:	80 81       	ld	r24, Z
 414:	8a 33       	cpi	r24, 0x3A	; 58
 416:	a1 f7       	brne	.-24     	; 0x400 <__EEPROM_REGION_LENGTH__>
		sendData(soilWord[i]);
	}
	sendData(':');
 418:	0e 94 5f 02 	call	0x4be	; 0x4be <sendData>
}
 41c:	2a 96       	adiw	r28, 0x0a	; 10
 41e:	0f b6       	in	r0, 0x3f	; 63
 420:	f8 94       	cli
 422:	de bf       	out	0x3e, r29	; 62
 424:	0f be       	out	0x3f, r0	; 63
 426:	cd bf       	out	0x3d, r28	; 61
 428:	df 91       	pop	r29
 42a:	cf 91       	pop	r28
 42c:	1f 91       	pop	r17
 42e:	08 95       	ret

Disassembly of section .text.convertData:

000000e0 <convertData>:

void convertData(void) {
	// DHT sensor communication
	PORTC &= ~(1 << DHT_PIN);  // Pull low
  e0:	88 b1       	in	r24, 0x08	; 8
  e2:	8b 7f       	andi	r24, 0xFB	; 251
  e4:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e6:	2f ef       	ldi	r18, 0xFF	; 255
  e8:	80 ee       	ldi	r24, 0xE0	; 224
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	21 50       	subi	r18, 0x01	; 1
  ee:	80 40       	sbci	r24, 0x00	; 0
  f0:	90 40       	sbci	r25, 0x00	; 0
  f2:	e1 f7       	brne	.-8      	; 0xec <convertData+0xc>
  f4:	00 c0       	rjmp	.+0      	; 0xf6 <convertData+0x16>
  f6:	00 00       	nop
	_delay_ms(18);
	PORTC |= (1 << DHT_PIN);   // Pull high
  f8:	88 b1       	in	r24, 0x08	; 8
  fa:	84 60       	ori	r24, 0x04	; 4
  fc:	88 b9       	out	0x08, r24	; 8
	DDRC &= ~(1 << DHT_PIN);   // Set as input
  fe:	87 b1       	in	r24, 0x07	; 7
 100:	8b 7f       	andi	r24, 0xFB	; 251
 102:	87 b9       	out	0x07, r24	; 7
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 104:	20 ea       	ldi	r18, 0xA0	; 160
 106:	2a 95       	dec	r18
 108:	f1 f7       	brne	.-4      	; 0x106 <convertData+0x26>
 10a:	8f e3       	ldi	r24, 0x3F	; 63
 10c:	91 e0       	ldi	r25, 0x01	; 1
 10e:	01 97       	sbiw	r24, 0x01	; 1
 110:	f1 f7       	brne	.-4      	; 0x10e <convertData+0x2e>
 112:	00 c0       	rjmp	.+0      	; 0x114 <convertData+0x34>
 114:	00 00       	nop
 116:	8f e3       	ldi	r24, 0x3F	; 63
 118:	91 e0       	ldi	r25, 0x01	; 1
 11a:	01 97       	sbiw	r24, 0x01	; 1
 11c:	f1 f7       	brne	.-4      	; 0x11a <convertData+0x3a>
 11e:	00 c0       	rjmp	.+0      	; 0x120 <convertData+0x40>
 120:	00 00       	nop
 122:	87 ec       	ldi	r24, 0xC7	; 199
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	01 97       	sbiw	r24, 0x01	; 1
 128:	f1 f7       	brne	.-4      	; 0x126 <convertData+0x46>
 12a:	00 c0       	rjmp	.+0      	; 0x12c <convertData+0x4c>
 12c:	00 00       	nop
	_delay_us(80);
	_delay_us(80);
	_delay_us(50);
	
	// Wait for sensor response
	while (!(PINC & (1 << DHT_PIN)));
 12e:	32 9b       	sbis	0x06, 2	; 6
 130:	fe cf       	rjmp	.-4      	; 0x12e <convertData+0x4e>
	
	// Read humidity integer part (8 bits)
	humidityInt = 0;
 132:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <humidityInt>
	for (uint8_t i = 0; i < 8; i++) {
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	12 c0       	rjmp	.+36     	; 0x15e <convertData+0x7e>
		while (!(PINC & (1 << DHT_PIN)));
 13a:	32 9b       	sbis	0x06, 2	; 6
 13c:	fe cf       	rjmp	.-4      	; 0x13a <convertData+0x5a>
 13e:	20 ea       	ldi	r18, 0xA0	; 160
 140:	2a 95       	dec	r18
 142:	f1 f7       	brne	.-4      	; 0x140 <convertData+0x60>
		_delay_us(30);
		humidityInt <<= 1;
 144:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <humidityInt>
 148:	88 0f       	add	r24, r24
 14a:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <humidityInt>
		if (PINC & (1 << DHT_PIN)) {
 14e:	32 9b       	sbis	0x06, 2	; 6
 150:	03 c0       	rjmp	.+6      	; 0x158 <convertData+0x78>
			humidityInt |= 1;
 152:	81 60       	ori	r24, 0x01	; 1
 154:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <humidityInt>
		}
		while (PINC & (1 << DHT_PIN));
 158:	32 99       	sbic	0x06, 2	; 6
 15a:	fe cf       	rjmp	.-4      	; 0x158 <convertData+0x78>
	// Wait for sensor response
	while (!(PINC & (1 << DHT_PIN)));
	
	// Read humidity integer part (8 bits)
	humidityInt = 0;
	for (uint8_t i = 0; i < 8; i++) {
 15c:	9f 5f       	subi	r25, 0xFF	; 255
 15e:	98 30       	cpi	r25, 0x08	; 8
 160:	60 f3       	brcs	.-40     	; 0x13a <convertData+0x5a>
		}
		while (PINC & (1 << DHT_PIN));
	}
	
	// Read humidity decimal part (8 bits)
	humidityDec = 0;
 162:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <humidityDec>
	for (uint8_t i = 0; i < 8; i++) {
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	12 c0       	rjmp	.+36     	; 0x18e <convertData+0xae>
		while (!(PINC & (1 << DHT_PIN)));
 16a:	32 9b       	sbis	0x06, 2	; 6
 16c:	fe cf       	rjmp	.-4      	; 0x16a <convertData+0x8a>
 16e:	80 ea       	ldi	r24, 0xA0	; 160
 170:	8a 95       	dec	r24
 172:	f1 f7       	brne	.-4      	; 0x170 <convertData+0x90>
		_delay_us(30);
		humidityDec <<= 1;
 174:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <humidityDec>
 178:	88 0f       	add	r24, r24
 17a:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <humidityDec>
		if (PINC & (1 << DHT_PIN)) {
 17e:	32 9b       	sbis	0x06, 2	; 6
 180:	03 c0       	rjmp	.+6      	; 0x188 <convertData+0xa8>
			humidityDec |= 1;
 182:	81 60       	ori	r24, 0x01	; 1
 184:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <humidityDec>
		}
		while (PINC & (1 << DHT_PIN));
 188:	32 99       	sbic	0x06, 2	; 6
 18a:	fe cf       	rjmp	.-4      	; 0x188 <convertData+0xa8>
		while (PINC & (1 << DHT_PIN));
	}
	
	// Read humidity decimal part (8 bits)
	humidityDec = 0;
	for (uint8_t i = 0; i < 8; i++) {
 18c:	9f 5f       	subi	r25, 0xFF	; 255
 18e:	98 30       	cpi	r25, 0x08	; 8
 190:	60 f3       	brcs	.-40     	; 0x16a <convertData+0x8a>
		}
		while (PINC & (1 << DHT_PIN));
	}
	
	// Read temperature (8 bits)
	temperature = 0;
 192:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
	for (uint8_t i = 0; i < 8; i++) {
 196:	90 e0       	ldi	r25, 0x00	; 0
 198:	12 c0       	rjmp	.+36     	; 0x1be <convertData+0xde>
		while (!(PINC & (1 << DHT_PIN)));
 19a:	32 9b       	sbis	0x06, 2	; 6
 19c:	fe cf       	rjmp	.-4      	; 0x19a <convertData+0xba>
 19e:	20 ea       	ldi	r18, 0xA0	; 160
 1a0:	2a 95       	dec	r18
 1a2:	f1 f7       	brne	.-4      	; 0x1a0 <convertData+0xc0>
		_delay_us(30);
		temperature <<= 1;
 1a4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1a8:	88 0f       	add	r24, r24
 1aa:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		if (PINC & (1 << DHT_PIN)) {
 1ae:	32 9b       	sbis	0x06, 2	; 6
 1b0:	03 c0       	rjmp	.+6      	; 0x1b8 <convertData+0xd8>
			temperature |= 1;
 1b2:	81 60       	ori	r24, 0x01	; 1
 1b4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		}
		while (PINC & (1 << DHT_PIN));
 1b8:	32 99       	sbic	0x06, 2	; 6
 1ba:	fe cf       	rjmp	.-4      	; 0x1b8 <convertData+0xd8>
		while (PINC & (1 << DHT_PIN));
	}
	
	// Read temperature (8 bits)
	temperature = 0;
	for (uint8_t i = 0; i < 8; i++) {
 1bc:	9f 5f       	subi	r25, 0xFF	; 255
 1be:	98 30       	cpi	r25, 0x08	; 8
 1c0:	60 f3       	brcs	.-40     	; 0x19a <convertData+0xba>
		if (PINC & (1 << DHT_PIN)) {
			temperature |= 1;
		}
		while (PINC & (1 << DHT_PIN));
	}
}
 1c2:	08 95       	ret

Disassembly of section .text.readADC:

000004f0 <readADC>:
	soilMoisture = readADC(SOIL_SENSOR_PIN);
}

uint16_t readADC(uint8_t channel) {
	// Ensure channel is within valid range (0-7 for ATmega328P)
	channel &= 0x07;
 4f0:	87 70       	andi	r24, 0x07	; 7
	
	// Set the ADC channel
	ADMUX = (ADMUX & 0xF0) | channel;
 4f2:	ec e7       	ldi	r30, 0x7C	; 124
 4f4:	f0 e0       	ldi	r31, 0x00	; 0
 4f6:	90 81       	ld	r25, Z
 4f8:	90 7f       	andi	r25, 0xF0	; 240
 4fa:	89 2b       	or	r24, r25
 4fc:	80 83       	st	Z, r24
	
	// Start conversion
	ADCSRA |= (1 << ADSC);
 4fe:	ea e7       	ldi	r30, 0x7A	; 122
 500:	f0 e0       	ldi	r31, 0x00	; 0
 502:	80 81       	ld	r24, Z
 504:	80 64       	ori	r24, 0x40	; 64
 506:	80 83       	st	Z, r24
	
	// Wait for conversion to complete
	while (ADCSRA & (1 << ADSC));
 508:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 50c:	86 fd       	sbrc	r24, 6
 50e:	fc cf       	rjmp	.-8      	; 0x508 <readADC+0x18>
	
	// Return ADC result
	return ADC;
 510:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 514:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
}
 518:	08 95       	ret

Disassembly of section .text.readSoilMoisture:

00000538 <readSoilMoisture>:
	}
}

void readSoilMoisture(void) {
	// Initialize ADC for Soil Moisture Sensor on ADC3 (A3)
	ADMUX = (1 << REFS0);  // Use AVcc as reference
 538:	80 e4       	ldi	r24, 0x40	; 64
 53a:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	ADCSRA = (1 << ADEN) | (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);  // Enable ADC, Prescaler 128 (16 MHz / 128 = 125 kHz)
 53e:	87 e8       	ldi	r24, 0x87	; 135
 540:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
	
	// Read ADC value from Soil Moisture Sensor
	soilMoisture = readADC(SOIL_SENSOR_PIN);
 544:	83 e0       	ldi	r24, 0x03	; 3
 546:	0e 94 78 02 	call	0x4f0	; 0x4f0 <readADC>
 54a:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <soilMoisture+0x1>
 54e:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <soilMoisture>
 552:	08 95       	ret

Disassembly of section .text.hexToAscii:

00000554 <hexToAscii>:
	// Return ADC result
	return ADC;
}

void hexToAscii(uint8_t value, uint8_t *high, uint8_t *low) {
	uint8_t tens = 0;
 554:	90 e0       	ldi	r25, 0x00	; 0
	while (value >= 10) {
 556:	02 c0       	rjmp	.+4      	; 0x55c <hexToAscii+0x8>
		value -= 10;
 558:	8a 50       	subi	r24, 0x0A	; 10
		tens++;
 55a:	9f 5f       	subi	r25, 0xFF	; 255
	return ADC;
}

void hexToAscii(uint8_t value, uint8_t *high, uint8_t *low) {
	uint8_t tens = 0;
	while (value >= 10) {
 55c:	8a 30       	cpi	r24, 0x0A	; 10
 55e:	e0 f7       	brcc	.-8      	; 0x558 <hexToAscii+0x4>
		value -= 10;
		tens++;
	}
	*high = tens + '0';
 560:	90 5d       	subi	r25, 0xD0	; 208
 562:	fb 01       	movw	r30, r22
 564:	90 83       	st	Z, r25
	*low = value + '0';
 566:	80 5d       	subi	r24, 0xD0	; 208
 568:	fa 01       	movw	r30, r20
 56a:	80 83       	st	Z, r24
 56c:	08 95       	ret

Disassembly of section .text.writeDHTData:

0000023c <writeDHTData>:
}

void writeDHTData(void) {
 23c:	cf 93       	push	r28
 23e:	df 93       	push	r29
 240:	00 d0       	rcall	.+0      	; 0x242 <writeDHTData+0x6>
 242:	cd b7       	in	r28, 0x3d	; 61
 244:	de b7       	in	r29, 0x3e	; 62
	// Write humidity on first line
	uint8_t high, low;
	hexToAscii(humidityInt, &high, &low);
 246:	ae 01       	movw	r20, r28
 248:	4e 5f       	subi	r20, 0xFE	; 254
 24a:	5f 4f       	sbci	r21, 0xFF	; 255
 24c:	be 01       	movw	r22, r28
 24e:	6f 5f       	subi	r22, 0xFF	; 255
 250:	7f 4f       	sbci	r23, 0xFF	; 255
 252:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <humidityInt>
 256:	0e 94 aa 02 	call	0x554	; 0x554 <hexToAscii>
	sendData(high);
 25a:	89 81       	ldd	r24, Y+1	; 0x01
 25c:	0e 94 5f 02 	call	0x4be	; 0x4be <sendData>
	sendData(low);
 260:	8a 81       	ldd	r24, Y+2	; 0x02
 262:	0e 94 5f 02 	call	0x4be	; 0x4be <sendData>
	sendData(' ');
 266:	80 e2       	ldi	r24, 0x20	; 32
 268:	0e 94 5f 02 	call	0x4be	; 0x4be <sendData>
	sendData('%');
 26c:	85 e2       	ldi	r24, 0x25	; 37
 26e:	0e 94 5f 02 	call	0x4be	; 0x4be <sendData>
	
	// Move to second line and write temperature
	sendCommand(0xC0);  // Second line
 272:	80 ec       	ldi	r24, 0xC0	; 192
 274:	0e 94 46 02 	call	0x48c	; 0x48c <sendCommand>
	sendTemperatureWord();
 278:	0e 94 8b 01 	call	0x316	; 0x316 <sendTemperatureWord>
	hexToAscii(temperature, &high, &low);
 27c:	ae 01       	movw	r20, r28
 27e:	4e 5f       	subi	r20, 0xFE	; 254
 280:	5f 4f       	sbci	r21, 0xFF	; 255
 282:	be 01       	movw	r22, r28
 284:	6f 5f       	subi	r22, 0xFF	; 255
 286:	7f 4f       	sbci	r23, 0xFF	; 255
 288:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 28c:	0e 94 aa 02 	call	0x554	; 0x554 <hexToAscii>
	sendData(high);
 290:	89 81       	ldd	r24, Y+1	; 0x01
 292:	0e 94 5f 02 	call	0x4be	; 0x4be <sendData>
	sendData(low);
 296:	8a 81       	ldd	r24, Y+2	; 0x02
 298:	0e 94 5f 02 	call	0x4be	; 0x4be <sendData>
	sendData(' ');
 29c:	80 e2       	ldi	r24, 0x20	; 32
 29e:	0e 94 5f 02 	call	0x4be	; 0x4be <sendData>
	sendData('C');
 2a2:	83 e4       	ldi	r24, 0x43	; 67
 2a4:	0e 94 5f 02 	call	0x4be	; 0x4be <sendData>
}
 2a8:	0f 90       	pop	r0
 2aa:	0f 90       	pop	r0
 2ac:	df 91       	pop	r29
 2ae:	cf 91       	pop	r28
 2b0:	08 95       	ret

Disassembly of section .text.writeSoilMoisture:

000002b2 <writeSoilMoisture>:

void writeSoilMoisture(void) {
 2b2:	cf 93       	push	r28
 2b4:	df 93       	push	r29
 2b6:	00 d0       	rcall	.+0      	; 0x2b8 <writeSoilMoisture+0x6>
 2b8:	cd b7       	in	r28, 0x3d	; 61
 2ba:	de b7       	in	r29, 0x3e	; 62
	// Write soil moisture on first line
	uint8_t high, low;
	uint8_t displayValue = soilMoisture / 10;  // Scale down for readability (e.g., 0-102)
 2bc:	20 91 01 01 	lds	r18, 0x0101	; 0x800101 <soilMoisture>
 2c0:	30 91 02 01 	lds	r19, 0x0102	; 0x800102 <soilMoisture+0x1>
 2c4:	ad ec       	ldi	r26, 0xCD	; 205
 2c6:	bc ec       	ldi	r27, 0xCC	; 204
 2c8:	0e 94 8d 02 	call	0x51a	; 0x51a <__umulhisi3>
 2cc:	96 95       	lsr	r25
 2ce:	87 95       	ror	r24
 2d0:	96 95       	lsr	r25
 2d2:	87 95       	ror	r24
 2d4:	96 95       	lsr	r25
 2d6:	87 95       	ror	r24
	hexToAscii(displayValue, &high, &low);
 2d8:	ae 01       	movw	r20, r28
 2da:	4e 5f       	subi	r20, 0xFE	; 254
 2dc:	5f 4f       	sbci	r21, 0xFF	; 255
 2de:	be 01       	movw	r22, r28
 2e0:	6f 5f       	subi	r22, 0xFF	; 255
 2e2:	7f 4f       	sbci	r23, 0xFF	; 255
 2e4:	0e 94 aa 02 	call	0x554	; 0x554 <hexToAscii>
	sendData(high);
 2e8:	89 81       	ldd	r24, Y+1	; 0x01
 2ea:	0e 94 5f 02 	call	0x4be	; 0x4be <sendData>
	sendData(low);
 2ee:	8a 81       	ldd	r24, Y+2	; 0x02
 2f0:	0e 94 5f 02 	call	0x4be	; 0x4be <sendData>
	sendData(' ');
 2f4:	80 e2       	ldi	r24, 0x20	; 32
 2f6:	0e 94 5f 02 	call	0x4be	; 0x4be <sendData>
	sendData('%');
 2fa:	85 e2       	ldi	r24, 0x25	; 37
 2fc:	0e 94 5f 02 	call	0x4be	; 0x4be <sendData>
	
	// Clear second line or leave it empty (optional)
	sendCommand(0xC0);  // Second line
 300:	80 ec       	ldi	r24, 0xC0	; 192
 302:	0e 94 46 02 	call	0x48c	; 0x48c <sendCommand>
	sendData(' ');      // Clear or leave blank (you can add more spaces or text)
 306:	80 e2       	ldi	r24, 0x20	; 32
 308:	0e 94 5f 02 	call	0x4be	; 0x4be <sendData>
 30c:	0f 90       	pop	r0
 30e:	0f 90       	pop	r0
 310:	df 91       	pop	r29
 312:	cf 91       	pop	r28
 314:	08 95       	ret

Disassembly of section .text.main:

000001c4 <main>:
uint16_t soilMoisture;
uint8_t displayToggle = 0;  // Variable for alternating display (0 - DHT, 1 - Soil)

int main(void) {
	// Initialize stack pointer for ATmega328P (RAMEND = 0x08FF)
	SPH = (RAMEND >> 8);    // High byte (0x08 for ATmega328P)
 1c4:	88 e0       	ldi	r24, 0x08	; 8
 1c6:	8e bf       	out	0x3e, r24	; 62
	SPL = (RAMEND & 0xFF);  // Low byte (0xFF for ATmega328P)
 1c8:	8f ef       	ldi	r24, 0xFF	; 255
 1ca:	8d bf       	out	0x3d, r24	; 61
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1cc:	2f ef       	ldi	r18, 0xFF	; 255
 1ce:	80 ee       	ldi	r24, 0xE0	; 224
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	21 50       	subi	r18, 0x01	; 1
 1d4:	80 40       	sbci	r24, 0x00	; 0
 1d6:	90 40       	sbci	r25, 0x00	; 0
 1d8:	e1 f7       	brne	.-8      	; 0x1d2 <main+0xe>
 1da:	00 c0       	rjmp	.+0      	; 0x1dc <main+0x18>
 1dc:	00 00       	nop
	
	_delay_ms(18);  // Wait for LCD power on
	
	while (1) {
		init();
 1de:	0e 94 cf 02 	call	0x59e	; 0x59e <init>
		initLCD();
 1e2:	0e 94 18 02 	call	0x430	; 0x430 <initLCD>
		convertData();           // Read DHT data (temperature and humidity)
 1e6:	0e 94 70 00 	call	0xe0	; 0xe0 <convertData>
		readSoilMoisture();      // Read soil moisture
 1ea:	0e 94 9c 02 	call	0x538	; 0x538 <readSoilMoisture>
		
		// Clear display before new display
		sendCommand(0x01);  // Clear display
 1ee:	81 e0       	ldi	r24, 0x01	; 1
 1f0:	0e 94 46 02 	call	0x48c	; 0x48c <sendCommand>
 1f4:	8f e3       	ldi	r24, 0x3F	; 63
 1f6:	9f e1       	ldi	r25, 0x1F	; 31
 1f8:	01 97       	sbiw	r24, 0x01	; 1
 1fa:	f1 f7       	brne	.-4      	; 0x1f8 <main+0x34>
 1fc:	00 c0       	rjmp	.+0      	; 0x1fe <main+0x3a>
 1fe:	00 00       	nop
		_delay_ms(2);       // Delay after clear
		
		if (displayToggle == 0) {
 200:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <displayToggle>
 204:	81 11       	cpse	r24, r1
 206:	05 c0       	rjmp	.+10     	; 0x212 <main+0x4e>
			// Show DHT11 data (humidity and temperature)
			sendHumidityWord();
 208:	0e 94 ba 01 	call	0x374	; 0x374 <sendHumidityWord>
			writeDHTData();  // Includes both humidity and temperature
 20c:	0e 94 1e 01 	call	0x23c	; 0x23c <writeDHTData>
 210:	04 c0       	rjmp	.+8      	; 0x21a <main+0x56>
			} else {
			// Show Soil Moisture data
			sendSoilWord();
 212:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <sendSoilWord>
			writeSoilMoisture();
 216:	0e 94 59 01 	call	0x2b2	; 0x2b2 <writeSoilMoisture>
		}
		
		displayToggle = !displayToggle;  // Toggle state (0 -> 1, 1 -> 0)
 21a:	81 e0       	ldi	r24, 0x01	; 1
 21c:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <displayToggle>
 220:	91 11       	cpse	r25, r1
 222:	80 e0       	ldi	r24, 0x00	; 0
 224:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <displayToggle>
 228:	9f ef       	ldi	r25, 0xFF	; 255
 22a:	2b e7       	ldi	r18, 0x7B	; 123
 22c:	82 e9       	ldi	r24, 0x92	; 146
 22e:	91 50       	subi	r25, 0x01	; 1
 230:	20 40       	sbci	r18, 0x00	; 0
 232:	80 40       	sbci	r24, 0x00	; 0
 234:	e1 f7       	brne	.-8      	; 0x22e <main+0x6a>
 236:	00 c0       	rjmp	.+0      	; 0x238 <main+0x74>
 238:	00 00       	nop
 23a:	d1 cf       	rjmp	.-94     	; 0x1de <main+0x1a>

Disassembly of section .text.libgcc.mul:

0000051a <__umulhisi3>:
 51a:	a2 9f       	mul	r26, r18
 51c:	b0 01       	movw	r22, r0
 51e:	b3 9f       	mul	r27, r19
 520:	c0 01       	movw	r24, r0
 522:	a3 9f       	mul	r26, r19
 524:	70 0d       	add	r23, r0
 526:	81 1d       	adc	r24, r1
 528:	11 24       	eor	r1, r1
 52a:	91 1d       	adc	r25, r1
 52c:	b2 9f       	mul	r27, r18
 52e:	70 0d       	add	r23, r0
 530:	81 1d       	adc	r24, r1
 532:	11 24       	eor	r1, r1
 534:	91 1d       	adc	r25, r1
 536:	08 95       	ret

Disassembly of section .text.libgcc:

0000056e <__movmemx_qi>:
 56e:	99 27       	eor	r25, r25

00000570 <__movmemx_hi>:
 570:	77 fd       	sbrc	r23, 7
 572:	05 c0       	rjmp	.+10     	; 0x57e <__movmemx_hi+0xe>
 574:	05 90       	lpm	r0, Z+
 576:	0d 92       	st	X+, r0
 578:	01 97       	sbiw	r24, 0x01	; 1
 57a:	e1 f7       	brne	.-8      	; 0x574 <__movmemx_hi+0x4>
 57c:	08 95       	ret
 57e:	01 90       	ld	r0, Z+
 580:	0d 92       	st	X+, r0
 582:	01 97       	sbiw	r24, 0x01	; 1
 584:	e1 f7       	brne	.-8      	; 0x57e <__movmemx_hi+0xe>
 586:	08 95       	ret

Disassembly of section .text.__dummy_fini:

000005b8 <_fini>:
 5b8:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

000005ba <__funcs_on_exit>:
 5ba:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

000005bc <__simulator_exit>:
 5bc:	08 95       	ret

Disassembly of section .text.exit:

00000588 <exit>:
 588:	ec 01       	movw	r28, r24
 58a:	0e 94 dd 02 	call	0x5ba	; 0x5ba <__funcs_on_exit>
 58e:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <_fini>
 592:	ce 01       	movw	r24, r28
 594:	0e 94 de 02 	call	0x5bc	; 0x5bc <__simulator_exit>
 598:	ce 01       	movw	r24, r28
 59a:	0e 94 da 02 	call	0x5b4	; 0x5b4 <_Exit>

Disassembly of section .text._Exit:

000005b4 <_Exit>:
 5b4:	0e 94 5f 00 	call	0xbe	; 0xbe <_exit>
